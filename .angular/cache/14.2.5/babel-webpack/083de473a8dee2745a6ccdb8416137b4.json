{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ivan/Desktop/Luciano/Proyecto Final/Front-end-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, uploadBytes, listAll, getDownloadURL } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageServiceProyects {\n  constructor(storage) {\n    this.storage = storage;\n    this.images = [];\n  }\n\n  ngOnInit() {\n    this.getImages();\n  }\n\n  uploadImage($event) {\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `proyects/${file.name}`);\n    uploadBytes(imgRef, file).then(_response => {\n      console.log(_response);\n      this.getImages();\n    }).catch(error => console.log(error));\n  }\n\n  getImages() {\n    var _this = this;\n\n    const imageRef = ref(this.storage, 'proyects');\n    listAll(imageRef).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        _this.images = [];\n\n        for (let item of response.items) {\n          const url = yield getDownloadURL(item);\n\n          _this.images.push(url);\n\n          console.log(\"La url es: \" + url);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n}\n\nImageServiceProyects.ɵfac = function ImageServiceProyects_Factory(t) {\n  return new (t || ImageServiceProyects)(i0.ɵɵinject(i1.Storage));\n};\n\nImageServiceProyects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageServiceProyects,\n  factory: ImageServiceProyects.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAkBA,GAAlB,EAAuBC,WAAvB,EAAoCC,OAApC,EAA6CC,cAA7C,QAAmE,uBAAnE;;;AAMA,OAAM,MAAOC,oBAAP,CAA2B;EAG/BC,YAAoBC,OAApB,EAAoC;IAAhB;IAClB,KAAKC,MAAL,GAAY,EAAZ;EACA;;EAEJC,QAAQ;IACN,KAAKC,SAAL;EACD;;EAEQC,WAAW,CAACC,MAAD,EAAY;IAC5B,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,CAApB,CAAb;IACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ;IACA,MAAMK,MAAM,GAAGjB,GAAG,CAAC,KAAKM,OAAN,EAAe,YAAYM,IAAI,CAACM,IAAI,EAApC,CAAlB;IACAjB,WAAW,CAACgB,MAAD,EAASL,IAAT,CAAX,CACGO,IADH,CACQC,SAAS,IAAG;MAChBL,OAAO,CAACC,GAAR,CAAYI,SAAZ;MACA,KAAKX,SAAL;IAAiB,CAHrB,EAIGY,KAJH,CAISC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAJlB;EAKD;;EAEDb,SAAS;IAAA;;IACP,MAAMc,QAAQ,GAAGvB,GAAG,CAAC,KAAKM,OAAN,EAAe,UAAf,CAApB;IACAJ,OAAO,CAACqB,QAAD,CAAP,CACGJ,IADH;MAAA,6BACQ,WAAMK,QAAN,EAAiB;QACrB,KAAI,CAACjB,MAAL,GAAY,EAAZ;;QACA,KAAK,IAAIkB,IAAT,IAAiBD,QAAQ,CAACE,KAA1B,EAAiC;UAC/B,MAAMC,GAAG,SAASxB,cAAc,CAACsB,IAAD,CAAhC;;UACA,KAAI,CAAClB,MAAL,CAAYqB,IAAZ,CAAiBD,GAAjB;;UACAZ,OAAO,CAACC,GAAR,CAAY,gBAAgBW,GAA5B;QACD;MACF,CARH;;MAAA;QAAA;MAAA;IAAA,KASGN,KATH,CASSC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CATlB;EAUD;;AAlC8B;;;mBAApBlB,sBAAoByB;AAAA;;;SAApBzB;EAAoB0B,SAApB1B,oBAAoB;EAAA2B,YAFnB","names":["ref","uploadBytes","listAll","getDownloadURL","ImageServiceProyects","constructor","storage","images","ngOnInit","getImages","uploadImage","$event","file","target","files","console","log","imgRef","name","then","_response","catch","error","imageRef","response","item","items","url","push","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Ivan\\Desktop\\Luciano\\Proyecto Final\\Front-end-Portfolio\\src\\app\\service\\image-service-proyects.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes, listAll, getDownloadURL } from '@angular/fire/storage';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageServiceProyects{\n  images: string[];\n\n  constructor(private storage: Storage) {\n    this.images=[];\n   }\n\nngOnInit(){\n  this.getImages()\n}\n\n  public uploadImage($event: any) {\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `proyects/${file.name}`)\n    uploadBytes(imgRef, file)\n      .then(_response => {\n        console.log(_response)\n        this.getImages()})\n      .catch(error => console.log(error))\n  }\n\n  getImages() {\n    const imageRef = ref(this.storage, 'proyects')\n    listAll(imageRef)\n      .then(async response => {\n        this.images=[];\n        for (let item of response.items) {\n          const url = await getDownloadURL(item);\n          this.images.push(url)\n          console.log(\"La url es: \" + url);\n        }\n      })\n      .catch(error => console.log(error))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}