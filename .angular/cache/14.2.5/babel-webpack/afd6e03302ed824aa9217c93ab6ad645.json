{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ivan/Desktop/Luciano/Proyecto Final/Front-end-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, uploadBytes, getDownloadURL, listAll } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageServiceProyects {\n  constructor(storage) {\n    this.storage = storage;\n    this.url = \"\";\n  }\n\n  uploadImage($event) {\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `imagen-Proyects/${file.name}`);\n    uploadBytes(imgRef, file).then(_response => getDownloadURL(imgRef).then(_url => this.url = _url)).catch(error => console.log(error));\n  }\n\n  getImages() {\n    const imageRef = ref(this.storage, 'imagen-Proyects');\n    listAll(imageRef).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        for (let item of response.items) {\n          const url = yield getDownloadURL(item);\n          console.log(\"la url es: \" + url);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n}\n\nImageServiceProyects.ɵfac = function ImageServiceProyects_Factory(t) {\n  return new (t || ImageServiceProyects)(i0.ɵɵinject(i1.Storage));\n};\n\nImageServiceProyects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageServiceProyects,\n  factory: ImageServiceProyects.ɵfac,\n  providedIn: 'root'\n});\n;","map":{"version":3,"mappings":";AACA,SAAkBA,GAAlB,EAAuBC,WAAvB,EAAoCC,cAApC,EAAoDC,OAApD,QAAmE,uBAAnE;;;AAIA,OAAM,MAAOC,oBAAP,CAA2B;EAG/BC,YAAoBC,OAApB,EAAoC;IAAhB;IAFpB,WAAc,EAAd;EAEyC;;EAElCC,WAAW,CAACC,MAAD,EAAY;IAC5B,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,CAApB,CAAb;IACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ;IACA,MAAMK,MAAM,GAAGd,GAAG,CAAC,KAAKM,OAAN,EAAe,mBAAmBG,IAAI,CAACM,IAAI,EAA3C,CAAlB;IACAd,WAAW,CAACa,MAAD,EAASL,IAAT,CAAX,CACGO,IADH,CACSC,SAAS,IACdf,cAAc,CAACY,MAAD,CAAd,CACCE,IADD,CACME,IAAI,IAAI,KAAKC,GAAL,GAAWD,IADzB,CAFJ,EAKGE,KALH,CAKSC,KAAK,IAAIT,OAAO,CAACC,GAAR,CAAYQ,KAAZ,CALlB;EAMD;;EAEDC,SAAS;IACP,MAAMC,QAAQ,GAAGvB,GAAG,CAAC,KAAKM,OAAN,EAAe,iBAAf,CAApB;IACAH,OAAO,CAACoB,QAAD,CAAP,CACGP,IADH;MAAA,6BACQ,WAAMQ,QAAN,EAAiB;QACrB,KAAK,IAAIC,IAAT,IAAiBD,QAAQ,CAACE,KAA1B,EAAiC;UAC/B,MAAMP,GAAG,SAASjB,cAAc,CAACuB,IAAD,CAAhC;UACAb,OAAO,CAACC,GAAR,CAAY,gBAAgBM,GAA5B;QACD;MACF,CANH;;MAAA;QAAA;MAAA;IAAA,KAOGC,KAPH,CAOSC,KAAK,IAAIT,OAAO,CAACC,GAAR,CAAYQ,KAAZ,CAPlB;EAQD;;AA3B8B;;;mBAApBjB,sBAAoBuB;AAAA;;;SAApBvB;EAAoBwB,SAApBxB,oBAAoB;EAAAyB,YAFnB;;AA8Bb","names":["ref","uploadBytes","getDownloadURL","listAll","ImageServiceProyects","constructor","storage","uploadImage","$event","file","target","files","console","log","imgRef","name","then","_response","_url","url","catch","error","getImages","imageRef","response","item","items","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Ivan\\Desktop\\Luciano\\Proyecto Final\\Front-end-Portfolio\\src\\app\\service\\image-service-proyects.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes, getDownloadURL, listAll } from '@angular/fire/storage';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageServiceProyects {\n  url: string = \"\";\n\n  constructor(private storage: Storage) { }\n\n  public uploadImage($event: any) {\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `imagen-Proyects/${file.name}`)\n    uploadBytes(imgRef, file)\n      .then( _response => \n        getDownloadURL(imgRef)\n        .then(_url => this.url = _url)\n        )\n      .catch(error => console.log(error))\n  }\n\n  getImages() {\n    const imageRef = ref(this.storage, 'imagen-Proyects')\n    listAll(imageRef)\n      .then(async response => {\n        for (let item of response.items) {\n          const url = await getDownloadURL(item);\n          console.log(\"la url es: \" + url)\n        }\n      })\n      .catch(error => console.log(error))\n  }\n};"]},"metadata":{},"sourceType":"module"}