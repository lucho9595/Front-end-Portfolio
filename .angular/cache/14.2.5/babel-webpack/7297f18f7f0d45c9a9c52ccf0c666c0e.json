{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ivan/Desktop/Luciano/Proyecto Final/Front-end-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, uploadBytes, getDownloadURL, list } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageServiceProyects {\n  constructor(storage) {\n    this.storage = storage;\n    this.url = \"\";\n  }\n\n  ngOnInit() {\n    this.getImages();\n  }\n\n  uploadImage($event) {\n    var _this = this;\n\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `imagen-Proyects/${file.name}`);\n    uploadBytes(imgRef, file).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (_response) {\n        _this.getImages();\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n  getImages() {\n    var _this2 = this;\n\n    const imageRef = ref(this.storage, 'imagen-Proyects');\n    console.log(imageRef);\n    list(imageRef).then( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (response) {\n        _this2.images = [];\n\n        for (let item of response.items) {\n          const links = yield getDownloadURL(item);\n\n          _this2.images.push(links);\n        }\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n}\n\nImageServiceProyects.ɵfac = function ImageServiceProyects_Factory(t) {\n  return new (t || ImageServiceProyects)(i0.ɵɵinject(i1.Storage));\n};\n\nImageServiceProyects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageServiceProyects,\n  factory: ImageServiceProyects.ɵfac,\n  providedIn: 'root'\n});\n;","map":{"version":3,"mappings":";AACA,SAAkBA,GAAlB,EAAuBC,WAAvB,EAAoCC,cAApC,EAAoDC,IAApD,QAAgE,uBAAhE;;;AAIA,OAAM,MAAOC,oBAAP,CAA2B;EAI/BC,YAAoBC,OAApB,EAAoC;IAAhB;IAHpB,WAAc,EAAd;EAGyC;;EAEzCC,QAAQ;IACN,KAAKC,SAAL;EACD;;EAEMC,WAAW,CAACC,MAAD,EAAY;IAAA;;IAC5B,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,CAApB,CAAb;IACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ;IACA,MAAMK,MAAM,GAAGhB,GAAG,CAAC,KAAKM,OAAN,EAAe,mBAAmBK,IAAI,CAACM,IAAI,EAA3C,CAAlB;IACAhB,WAAW,CAACe,MAAD,EAASL,IAAT,CAAX,CACGO,IADH;MAAA,6BACQ,WAAMC,SAAN,EAAkB;QAAE,KAAI,CAACX,SAAL;MAAiB,CAD7C;;MAAA;QAAA;MAAA;IAAA,KAEGY,KAFH,CAESC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAFlB;EAGD;;EAEDb,SAAS;IAAA;;IACP,MAAMc,QAAQ,GAAGtB,GAAG,CAAC,KAAKM,OAAN,EAAe,iBAAf,CAApB;IACAQ,OAAO,CAACC,GAAR,CAAYO,QAAZ;IACAnB,IAAI,CAACmB,QAAD,CAAJ,CACGJ,IADH;MAAA,8BACQ,WAAMK,QAAN,EAAiB;QACrB,MAAI,CAACC,MAAL,GAAa,EAAb;;QACA,KAAK,IAAIC,IAAT,IAAiBF,QAAQ,CAACG,KAA1B,EAAiC;UAC/B,MAAMC,KAAK,SAASzB,cAAc,CAACuB,IAAD,CAAlC;;UACA,MAAI,CAACD,MAAL,CAAYI,IAAZ,CAAiBD,KAAjB;QACD;MACF,CAPH;;MAAA;QAAA;MAAA;IAAA,KAQGP,KARH,CAQSC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CARlB;EASD;;AA/B8B;;;mBAApBjB,sBAAoByB;AAAA;;;SAApBzB;EAAoB0B,SAApB1B,oBAAoB;EAAA2B,YAFnB;;AAkCb","names":["ref","uploadBytes","getDownloadURL","list","ImageServiceProyects","constructor","storage","ngOnInit","getImages","uploadImage","$event","file","target","files","console","log","imgRef","name","then","_response","catch","error","imageRef","response","images","item","items","links","push","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Ivan\\Desktop\\Luciano\\Proyecto Final\\Front-end-Portfolio\\src\\app\\service\\image-service-proyects.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes, getDownloadURL, list } from '@angular/fire/storage';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageServiceProyects {\n  url: string = \"\";\n  images: string[];\n\n  constructor(private storage: Storage) { }\n\n  ngOnInit(){\n    this.getImages()\n  }\n\n  public uploadImage($event: any) {\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `imagen-Proyects/${file.name}`)\n    uploadBytes(imgRef, file)\n      .then(async _response => {this.getImages()})\n      .catch(error => console.log(error))\n  }\n\n  getImages() {\n    const imageRef = ref(this.storage, 'imagen-Proyects')\n    console.log(imageRef)\n    list(imageRef)\n      .then(async response => {\n        this.images= [];\n        for (let item of response.items) {\n          const links = await getDownloadURL(item);\n          this.images.push(links);\n        }\n      })\n      .catch(error => console.log(error))\n  }\n};"]},"metadata":{},"sourceType":"module"}