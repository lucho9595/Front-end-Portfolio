{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ivan/Desktop/Luciano/Proyecto Final/Front-end-Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, uploadBytes, getDownloadURL, list } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageServiceProyects {\n  constructor(storage) {\n    this.storage = storage;\n    this.url = \"\";\n  }\n\n  uploadImage($event, name) {\n    var _this = this;\n\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `imagen-Proyects/`);\n    uploadBytes(imgRef, file).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (_response) {\n        _this.getImages();\n\n        console.log(_this.getImages());\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n  getImages() {\n    var _this2 = this;\n\n    const imageRef = ref(this.storage, 'imagen-Proyects');\n    console.log(imageRef);\n    list(imageRef).then( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (response) {\n        console.log(response.items);\n\n        for (let item of response.items) {\n          _this2.url = yield getDownloadURL(item);\n          console.log(\"La url es: \" + _this2.url);\n        }\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()).catch(error => console.log(error));\n  }\n\n}\n\nImageServiceProyects.ɵfac = function ImageServiceProyects_Factory(t) {\n  return new (t || ImageServiceProyects)(i0.ɵɵinject(i1.Storage));\n};\n\nImageServiceProyects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageServiceProyects,\n  factory: ImageServiceProyects.ɵfac,\n  providedIn: 'root'\n});\n;","map":{"version":3,"mappings":";AACA,SAAkBA,GAAlB,EAAuBC,WAAvB,EAAoCC,cAApC,EAAoDC,IAApD,QAAgE,uBAAhE;;;AAIA,OAAM,MAAOC,oBAAP,CAA2B;EAG/BC,YAAoBC,OAApB,EAAoC;IAAhB;IAFpB,WAAc,EAAd;EAEyC;;EAElCC,WAAW,CAACC,MAAD,EAAcC,IAAd,EAA0B;IAAA;;IAC1C,MAAMC,IAAI,GAAGF,MAAM,CAACG,MAAP,CAAcC,KAAd,CAAoB,CAApB,CAAb;IACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ;IACA,MAAMK,MAAM,GAAGf,GAAG,CAAC,KAAKM,OAAN,EAAe,kBAAf,CAAlB;IACAL,WAAW,CAACc,MAAD,EAASL,IAAT,CAAX,CACGM,IADH;MAAA,6BACQ,WAAMC,SAAN,EAAkB;QAAG,KAAI,CAACC,SAAL;;QAAkBL,OAAO,CAACC,GAAR,CAAY,KAAI,CAACI,SAAL,EAAZ;MAA8B,CAD7E;;MAAA;QAAA;MAAA;IAAA,KAEGC,KAFH,CAESC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAFlB;EAGD;;EAEDF,SAAS;IAAA;;IACP,MAAMG,QAAQ,GAAGrB,GAAG,CAAC,KAAKM,OAAN,EAAe,iBAAf,CAApB;IACAO,OAAO,CAACC,GAAR,CAAYO,QAAZ;IACAlB,IAAI,CAACkB,QAAD,CAAJ,CACGL,IADH;MAAA,8BACQ,WAAMM,QAAN,EAAiB;QACrBT,OAAO,CAACC,GAAR,CAAYQ,QAAQ,CAACC,KAArB;;QACA,KAAK,IAAIC,IAAT,IAAiBF,QAAQ,CAACC,KAA1B,EAAiC;UAC/B,MAAI,CAACE,GAAL,SAAiBvB,cAAc,CAACsB,IAAD,CAA/B;UACAX,OAAO,CAACC,GAAR,CAAY,gBAAgB,MAAI,CAACW,GAAjC;QACD;MACF,CAPH;;MAAA;QAAA;MAAA;IAAA,KAQGN,KARH,CAQSC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CARlB;EASD;;AA1B8B;;;mBAApBhB,sBAAoBsB;AAAA;;;SAApBtB;EAAoBuB,SAApBvB,oBAAoB;EAAAwB,YAFnB;;AA6Bb","names":["ref","uploadBytes","getDownloadURL","list","ImageServiceProyects","constructor","storage","uploadImage","$event","name","file","target","files","console","log","imgRef","then","_response","getImages","catch","error","imageRef","response","items","item","url","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Ivan\\Desktop\\Luciano\\Proyecto Final\\Front-end-Portfolio\\src\\app\\service\\image-service-proyects.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes, getDownloadURL, list } from '@angular/fire/storage';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageServiceProyects {\n  url: string = \"\";\n\n  constructor(private storage: Storage) { }\n\n  public uploadImage($event: any, name: string) {\n    const file = $event.target.files[0];\n    console.log(file);\n    const imgRef = ref(this.storage, `imagen-Proyects/`)\n    uploadBytes(imgRef, file)\n      .then(async _response => { this.getImages(); console.log(this.getImages())})\n      .catch(error => console.log(error))\n  }\n\n  getImages() {\n    const imageRef = ref(this.storage, 'imagen-Proyects')\n    console.log(imageRef)\n    list(imageRef)\n      .then(async response => {\n        console.log(response.items)\n        for (let item of response.items) {\n          this.url = await getDownloadURL(item);\n          console.log(\"La url es: \" + this.url);\n        }\n      })\n      .catch(error => console.log(error))\n  }\n};"]},"metadata":{},"sourceType":"module"}